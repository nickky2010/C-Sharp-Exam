//                                         Пример задачи на «8»-«9»
//  Создать иерархию классов:
//                                                 Спортсмен
//                                                  /     \
//                                            Гимнаст       Пловец
//  Класс «Спортсмен» должен быть абстрактным и содержать следующие элементы: 
//      поле-фамилия, 
//      поле - возраст, 
//      поле вид спорта (гимнастика, бокс, плавание и т.д.), 
//      конструктор с параметрами, 
//      свойства для чтения полей класса, 
//      абстрактный метод для определения лучшего результата соревнований.  
//  Класс гимнастов должен содержать дополнительные поля: 
//      оценки за упражнения на кольцах, на брусьях, за опорный прыжок, 
//      конструктор с параметрами, 
//      реализацию метода для определения лучшего результата соревнований, 
//      операции < и  > для сравнения гимнастов по результатам.
//  Класс пловцов должен содержать дополнительное 
//      поле-массив с результатами заплывов, 
//      реализацию метода для определения лучшего результата соревнований, 
//      конструктор с параметрами, 
//      метод с переменным числом параметров, возвращающий средний результат за указанные заплывы(например, srednee(1,3) – средний результат за 1-й и 3-й заплывы, srednee(1) – время в 1-м заплыве и т.д.).
//  Создать класс-коллекцию(generic) с необходимой функциональностью. 
//  Создать в этом классе метод для поиска информации по заданному критерию(критерий передавать через параметр-делегат: стандартный или созданный, результат – объект этого класса). 
//  Предусмотреть метод для сериализации объекта класса в двоичном формате(параметры – имя файла, форматер). 
//  Перегрузить этот метод для сериализации объекта класса в формате XML.
//  Разработать консольное приложение на языке С#, которое выполняет следующие действия:
//      	Считывает из текстового файла данные о спортсменах и создает объект-коллекцию с элементами соответствующего типа;
//      	выводит на экран всю информацию в виде: 
//      ╔═════════════════╦═════════╦════════════╦══════════════════════╗
//      ║      Фамилия    ║ Возраст ║ Вид спорта ║   Лучший результат   ║
//      ╠═════════════════╬═════════╬════════════╬══════════════════════╣
//      ║      Петров     ║   18    ║ гимнастика ║      10.00 баллов    ║
//      ║     Сидоров     ║   23    ║  плавание  ║          20с         ║
//      ╚═════════════════╩═════════╩════════════╩══════════════════════╝
//      –	сортирует информацию по убыванию возраста с использованием класса, реализующего интерфейс IСomparer; 
//      –	Сериализует коллекцию в двоичном формате;
//      –	выводит на экран информацию о пловцах моложе 20 лет с указанием среднего результата в 1-м, 2-м и 5-м заплывах;
//      –	сравнивает двух указанных гимнастов по результатам;
//      –	сериализует информацию  о гимнастах в формате  XML;
//      –	выводит на экран фамилию слушателя, текущую дату и время.

using HW11.Collection;
using HW11.SportsmenClasses;
using HW11.Tables;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;

namespace HW11
{
    class Program
    {
        static void Main(string[] args)
        {
            try
            {
                SportmenCollection<Sportsmen> filmCollection = new SportmenCollection<Sportsmen>();
                Table[] table = {
                    new TableByTask("", new Table.Column("№", 3), new Table.Column("Фамилия", 30),
                        new Table.Column("Возраст"), new Table.Column("Вид спорта", 30), new Table.Column("Лучший результат",20)),
                    new TableSwimAverageResult("", new Table.Column("№", 3), new Table.Column("Фамилия", 30),
                        new Table.Column("Возраст"), new Table.Column("Вид спорта", 30), new Table.Column("Средний результат",20)),
                };
                string[] menuItems = {
                    "Считать данные о спортсменах",
                    "Вывод информации на экран",
                    "Сортировка информации по убыванию возраста",
                    "Сериализация коллекции в двоичном формате",
                    "Информация о пловцах моложе 20 лет с указанием среднего результата в 1-м, 2-м и 5-м заплывах",
                    "Сравнение двух указанных гимнастов по результатам",
                    "Сериализация информации о гимнастах в формате XML"
                };
                Menu menu = new Menu(ref menuItems, ref filmCollection, ref table);
                menu.Show();
            }
            catch (InvalidCastException ex)
            {
                Console.WriteLine("Ошибка! Задан неправильный формат таблицы!\n" + ex.Message);
                Console.ReadKey();
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
                Console.ReadKey();
            }
        }
    }
}
